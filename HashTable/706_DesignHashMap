<?php 

#Available @ https://leetcode.com/problems/design-hashmap/submissions/1178666821

/*

  ################ 706. Design HashMap ##############

Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.

*/


class MyHashMap {
    /**
     */

    private $hash_map;

    function __construct() {
        
        $this->hash_map=[];
    }
  
    /**
     * @param Integer $key
     * @param Integer $value
     * @return NULL
     */
    function put($key, $value) {

        $this->hash_map[$key]=$value;

    }
  
    /**
     * @param Integer $key
     * @return Integer
     */
    function get($key) {
        
        return (isset($this->hash_map[$key]))?$this->hash_map[$key]:-1;
    }
  
    /**
     * @param Integer $key
     * @return NULL
     */
    function remove($key) {
        
        if(array_key_exists($key,$this->hash_map))
        {
            unset($this->hash_map[$key]);
        }
    }
}

/*
$obj = new MyHashMap();
$op_command = ["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"];
$op_val = [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]];

for($k=1;$k<count($op_command);$k++)
{
    $op_cmnd = $op_command[$k];
    $op_value = $op_val[$k];

    if($op_cmnd=="put")
    {
        $obj->put($op_value[0],$op_value[1]);
    }
    else if($op_cmnd=="get")
    {
        echo $obj->get($op_value[0]);
    }
    else if($op_cmnd=="remove")
    {
        $obj->remove($op_value[0]);
    }

}
*/
?>
